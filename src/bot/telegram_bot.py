import asyncio
import os

from telebot import types
from telebot.async_telebot import AsyncTeleBot

from src.bot.parsing_data import strings_parsing, conv_parsing
from src.db.user_database_handler import UserDatabaseHandler
from src.util.image_processing import image_proc

flags = {'adding_pic': -1, 'changing_conv': -2, 'adding_strings': -3, 'asking_to_withdraw': -4, 'if_withdrawing': -5}

handler = UserDatabaseHandler("../db/user_colors.sql")
TOKEN = '7932733884:AAFsKDKeuFDvlbtue-jgf-bU2XKdMdzVgrM'

bot = AsyncTeleBot(TOKEN)

length = 100
width = 100


def update_user_flag(user_id, flag_name, state: bool) -> None:  # —Ñ–ª–∞–≥–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω-—Ñ—ã –æ—Ç —é–∑–µ—Ä–∞
    change_id = flags[flag_name]
    cur_st = bin(handler.get_user_settings(user_id))[2:]
    cur_st = list(cur_st.zfill(4))
    cur_st[change_id] = str(int(state))
    cur_st = ''.join(cur_st)
    handler.update_user_settings(user_id, int(cur_st, 2))


def check_user_flag(user_id, flag_name) -> int:
    settings = bin(handler.get_user_settings(user_id))[2:]
    settings = settings.zfill(4)
    return int(settings[flags[flag_name]], 2)


@bot.message_handler(commands=['start'])
async def help_handler(message):  # –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    user_id = message.from_user.id
    handler.insert_user(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    help_button = types.KeyboardButton("–ü–∞–º–∞–≥–∏—Ç–µ ü•∫ (—á—Ç–æ –¥–µ–ª–∞—é—Ç –∫–Ω–æ–ø–∫–∏/–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥)")
    add_strings_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∏—Ç–∫–∏ üêë")
    start_image_processing = types.KeyboardButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñº")
    explain = types.KeyboardButton("–ß—Ç–æ —è –∑–∞ –±–æ—Ç —Ç–∞–∫–æ–π? üßê")
    markup.add(help_button, add_strings_button, start_image_processing, explain)
    await bot.send_message(message.chat.id, text="–ó–¥–∞—Ä–æ–≤. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?".format(message.from_user),
                           reply_markup=markup)


@bot.message_handler(content_types=['text'])
async def command_handler(message):
    user_id = message.chat.id

    if not any(check_user_flag(user_id, flag) for flag in
               ['adding_pic', 'changing_conv', 'adding_strings', 'asking_to_withdraw']):  # —á–µ–∫ –∫–Ω–æ–ø–æ–∫
        if message.text == "–ü–∞–º–∞–≥–∏—Ç–µ ü•∫ (—á—Ç–æ –¥–µ–ª–∞—é—Ç –∫–Ω–æ–ø–∫–∏/–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥)":
            await bot.send_message(user_id, text=f'''
                –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏:\n
                -> –ü–∞–º–∞–≥–∏—Ç–µ - –∫—Ä–∞—Ç–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.\n
                -> –î–æ–±–∞–≤–∏—Ç—å –Ω–∏—Ç–∫–∏ - –¥–æ–±–∞–≤—å –Ω–∏—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ü–≤–µ—Ç - –¥–ª–∏–Ω–∞ –Ω–∏—Ç–∫–∏ –≤ —Å–º.\n
                -> –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—Ç–æ–º.\n
                -> –ß—Ç–æ —è –∑–∞ –±–æ—Ç —Ç–∞–∫–æ–π? - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ. \n
            ''')

        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∏—Ç–∫–∏ üêë":
            update_user_flag(user_id, "adding_strings", True)
            await bot.send_message(user_id, text="–î–æ–±–∞–≤—å –Ω–∏—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ü–≤–µ—Ç –≤ HEX - –¥–ª–∏–Ω–∞ –≤ —Å–º.")

        elif message.text == "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñº":
            update_user_flag(user_id, 'changing_conv', True)
            await bot.send_message(user_id, text="–ù–∞—á–Ω–µ–º! –í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –∫–ª–µ—Ç–æ–∫ –≤ –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

        elif message.text == "–ß—Ç–æ —è –∑–∞ –±–æ—Ç —Ç–∞–∫–æ–π? üßê":
            await bot.send_message(user_id, text='''–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ö–µ–º—É –¥–ª—è –≤—ã—à–∏–≤–∞–Ω–∏—è, 
                                                    –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª–∏–Ω—ã, —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–º–µ—é—â–∏—Ö—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏—Ç–æ–∫.
                                                    –ù–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º —Ä–∞–±–æ—Ç–∞–ª–∏ menella00, Oladiy2504 –∏ disbik''')

        else:
            await bot.send_message(user_id, text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    elif message.text == '/stop' and not check_user_flag(message.chat.id, "adding_strings"):
        update_user_flag(message.chat.id, "changing_conv", False)
        update_user_flag(message.chat.id, "asking_to_withdraw", False)
        update_user_flag(message.chat.id, "adding_strings", False)
        update_user_flag(message.chat.id, "adding_pic", False)
        await bot.send_message(user_id, text="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    elif check_user_flag(message.chat.id, "adding_strings"):
        if message.text == "/stop":
            await bot.send_message(message.chat.id, text="–ü—Ä–µ–∫—Ä–∞—â–∞—é –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–≤–µ—Ç–∞")
            update_user_flag(message.chat.id, "adding_strings", False)
        else:
            text_data = strings_parsing(message.text)
            if text_data:
                for [i, j] in text_data:
                    handler.insert_available(message.chat.id, i, j)
                    continue
            else:
                await bot.send_message(message.chat.id,
                                       text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ - –ø—Ä–æ–ø–∏—à–∏—Ç–µ /stop")


    elif check_user_flag(user_id, 'changing_conv'):
        text_data = conv_parsing(message.text)
        if text_data:
            global length, width
            length, width = text_data
            await bot.send_message(user_id, text="–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∏—Ç–∫–∏?")
            update_user_flag(user_id, 'changing_conv', False)
            update_user_flag(user_id, 'asking_to_withdraw', True)
        else:
            await bot.send_message(user_id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")


    elif check_user_flag(user_id, 'asking_to_withdraw'):
        if message.text.lower() == "–¥–∞":
            update_user_flag(user_id, 'if_withdraw', True)
            await bot.send_message(user_id, text="–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –Ω–∏—Ç–∫–∏. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            update_user_flag(user_id, 'asking_to_withdraw', False)
            update_user_flag(user_id, 'adding_pic', True)
        elif message.text.lower() == "–Ω–µ—Ç":
            update_user_flag(user_id, 'if_withdraw', False)
            await bot.send_message(user_id,
                                   text="–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –Ω–∏—Ç–∫–∏. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            update_user_flag(user_id, 'asking_to_withdraw', False)
            update_user_flag(user_id, 'adding_pic', True)
        else:
            await bot.send_message(user_id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")


    else:
        await bot.send_message(user_id, text="–≠—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞! –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /help")


@bot.message_handler(content_types=['photo'])
async def handle_image(message):
    if check_user_flag(message.chat.id, 'adding_pic'):
        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        image_path = f'received_image{message.chat.id}.jpg'
        pdf_path = f'output_image.pdf{message.chat.id}.pdf'
        with open(image_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        image_proc(image_path, pdf_path, message.chat.id, None, (length, width), 1,
                   check_user_flag(message.chat.id, 'if_withdraw') * 100)
        with open(pdf_path, 'rb') as pdf_file:
            await bot.send_document(message.chat.id, pdf_file)
        os.remove(image_path)
        os.remove(pdf_path)
        update_user_flag(message.chat.id, 'adding_pic', False)
        await bot.send_message(message.chat.id, text="–ì–æ—Ç–æ–≤–æ!")
    else:
        await bot.send_message(message.chat.id,
                               text="–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :). –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–µ")


@bot.message_handler(func=lambda message: True)
async def error_handler(message):
    await bot.send_message(message.chat.id,
                           text=f"–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –Ω–µ —Ç–∞–∫! –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞: https://youtu.be/dQw4w9WgXcQ?si=1DZGpDS1RDhs-ZJA")


asyncio.run(bot.infinity_polling())
